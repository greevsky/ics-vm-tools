#!/bin/sh
### BEGIN INIT INFO
# Provides:          ics-vm-tools
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Startup script for the ICS VM Tools
# Description:       Startup script for the ICS VM Tools
### END INIT INFO


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=ics-vm-tools             # Introduce a short description here
NAME=ics-vm-tools             # Introduce the short server's name here
DAEMON=/usr/share/ics-vm-tools/ics-vm-tools
DAEMON_ARGS=""             # Arguments to run the daemon with
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /etc/init.d/functions

#
# Function that starts the daemon/service
#
do_start()
{
    if [ ! -d /dev/virtio-ports ]; then
        modprobe virtio_console > /dev/null 2>&1
        for retries in `seq 5`; do
            sleep 1
            [ -d /dev/virtio-ports ] && break
        done
        [ -x /sbin/udevadm ] && /sbin/udevadm trigger
    fi
    if [ ! -f ${PIDFILE} ]; then
        /bin/touch ${PIDFILE}
    fi
    /bin/chown root:root ${PIDFILE}
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	daemon --user root --pidfile $PIDFILE $DAEMON > /dev/null || return 1 &
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	killproc -p  $PIDFILE -9
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	# Many daemons don't delete their pidfiles when they exit.
        fuser /dev/virtio-ports/com.inspur.ics.vmtools -k > /dev/null 2>&1
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && echo "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && echo 0 ;;
		2) [ "$VERBOSE" != no ] && echo 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && echo 0 ;;
		2) [ "$VERBOSE" != no ] && echo 1 ;;
	esac
	;;
  status)
       status -p "$PIDFILE" "$NAME" && exit 0 || exit $?
       ;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	echo "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) echo 0 ;;
			1) echo 1 ;; # Old process is still running
			*) echo 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		echo 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
